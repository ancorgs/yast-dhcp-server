/**
 * File:	include/dhcp-server/ui.ycp
 * Package:	Configuration of dhcp-server
 * Summary:	User interface
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

    textdomain "dhcp-server";

    import "Wizard";
    import "DhcpServer";
    import "CWM";

    import "Popup";
    import "Label";
    include "wizard/sequencer.ycp";

    global map functions = $[
	`abort : ``(DhcpServer::confirmAbort ()),
    ];

    /**
      * Run main dialog
      * @return symbol for wizard sequencer
      */
    global define symbol runMainDialog () ``{
        list widgets = CWM::CreateWidgets (["global_table", "log_button", ],
	    DhcpServer::widgets);
        term contents = `HBox (`HSpacing (2), `VBox (
                `VSpacing (1),
		widgets[0, "widget"]:`VSpacing (0),
		`VSpacing (1),
		widgets[1, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (2));
        // dialog caption
        string caption = _("DHCP server configuration");
        string help = CWM::MergeHelps (widgets);

        Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::FinishButton ());

        return CWM::Run (widgets, functions);
    }

    /**
      * Run subnet dialog
      * @return symbol for wizard sequencer
      */
    global define symbol runSubnetDialog () ``{
        list widgets = CWM::CreateWidgets (["subnet_table"], DhcpServer::widgets);
        term contents = `HBox (`HSpacing (2), `VBox (
                `VSpacing (1),
		widgets[0, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (2));
        // dialog caption
        string caption = _("Subnet configuration");
        string help = CWM::MergeHelps (widgets);

        Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::OKButton ());

        return CWM::Run (widgets, functions);
    }

    /**
      * Run host dialog
      * @return symbol for wizard sequencer
      */
    global define symbol runHostDialog () ``{
        list widgets = CWM::CreateWidgets (["host_table"], DhcpServer::widgets);
        term contents = `HBox (`HSpacing (2), `VBox (
                `VSpacing (1),
		widgets[0, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (2));
        // dialog caption
        string caption = _("Host with fixed address configuration");
        string help = CWM::MergeHelps (widgets);

        Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::OKButton ());

        return CWM::Run (widgets, functions);
    }

    /**
      * Run list of subnets dialog
      * @return symbol for wizard sequencer
      */
    global define symbol runSubnetSelectDialog () ``{
        list widgets = CWM::CreateWidgets (["subnets"], DhcpServer::widgets);
        term contents = `HBox (`HSpacing (2), `VBox (
                `VSpacing (1),
		widgets[0, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (2));
        // dialog caption
        string caption = _("Subnet configuration");
        string help = CWM::MergeHelps (widgets);

        Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::OKButton ());

        return CWM::Run (widgets, functions);
    }

    /**
      * Run list of hosts dialog
      * @return symbol for wizard sequencer
      */
    global define symbol runHostSelectDialog () ``{
        list widgets = CWM::CreateWidgets (["hosts"], DhcpServer::widgets);
        term contents = `HBox (`HSpacing (2), `VBox (
                `VSpacing (1),
		widgets[0, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (2));
        // dialog caption
        string caption = _("Host with fixed address configuration");
        string help = CWM::MergeHelps (widgets);

        Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::OKButton ());

        return CWM::Run (widgets, functions);
    }


    /**
      * Run wizard sequencer
      * @return `next, `back or `abort
      */
    global define symbol runWizard () ``{

	map aliases = $[
	    "main" : ``(runMainDialog ()),
	    "subnet" : ``(runSubnetDialog ()),
	    "host" : ``(runHostDialog ()),
	    "subnet_select" : ``(runSubnetSelectDialog ()),
	    "host_select" : ``(runHostSelectDialog ()),
	];

	map sequence = $[
	    "ws_start" : "main",
	    "main" : $[
		`next : `next,
		`abort : `abort,
		`subnets : "subnet_select",
		`hosts : "host_select",
	    ],
	    "subnet_select" : $[
		`next : "main",
		`edit : "subnet",
		`abort : `abort
	    ],
	    "host_select" : $[
		`next : "main",
		`edit : "host",
		`abort : `abort,
	    ],
	    "subnet" : $[
		`next : "subnet_select",
		`abort : `abort,
	    ],
	    "host" : $[
		`next : "host_select",
		`abort : `abort,
	    ],
	];

        // run wizard sequencer
        y2milestone ("Starting wizard sequencer");
        return WizardSequencer (aliases, sequence);
    }



}
