/**
 * File:	include/dhcp-server/dns-server-management.ycp
 * Package:	Configuration of dhcp-server
 * Summary:	Synchronization with DNS Server
 * Authors:	Lukas Ocilka <lukas.ocilka@suse.cz>
 *
 * $Id:$
 */

{

    textdomain "dhcp-server";

    import "Wizard";
    import "Label";
    import "DnsServer";
    import "DnsServerAPI";
    import "DnsServerPunycode";
    import "IP";
    import "Hostname";
    import "Sequencer";
    import "Report";
    import "Popup";

    include "dhcp-server/dns-helps.ycp";
    include "dhcp-server/dns-server-dialogs.ycp";

    /* ********************************************************************* */

    // --> Internal Variables
    
    // used for checking, informin about minimal and maximal values, etc.
    map <string, string> current_dhcp_settings = $[];

    // contains configuration of the new zone(s)
    map <string, any> create_new_zone = $[];

    // used for editing or removing current nameservers
    map <string, list <string> > translated_nameservers = $[];
    
    // used for editing or removing current ranges
    list <map <string, any> > used_ranges = [];
    
    // <-- Internal Variables

    /* ********************************************************************* */

    // --> Helper functions

    boolean AbortWizard () {
	return Popup::YesNoHeadline (
	    // TRANSLATORS: Popup headline
	    _("Aborting the Wizard"),
	    // TRANSLATORS: Popup question
	    _("All changes made in the wizard will be lost.
Are you sure you want to abort it?")
	);
    }

    void Wizard_StoreNewZoneDialog () {
	// sets whether the reverse zone will be created too
	create_new_zone["create_reverse_zone"] = (boolean) UI::QueryWidget(`id(`create_also_reverse_zone), `Value);
    }
    
    boolean Wizard_DeleteNSDialog () {
	string row_id = (string) UI::QueryWidget (`id("name_servers"), `CurrentItem);
	    
	string selected_ns = translated_nameservers[row_id, 1]:"";
	string selected_ip = translated_nameservers[row_id, 2]:"";

	create_new_zone["name_servers"] = filter (
	    list <string> one,
	    create_new_zone["name_servers"]:[],
	{
	    return (one[0]:"" != selected_ns || one[1]:"" != selected_ip);
	});
	
	return true;
    }
    
    boolean Wizard_DeleteResourceRecordsDialogDialog () {
	integer row_id = (integer) UI::QueryWidget (`id("dhcp_records"), `CurrentItem);
	map <string, any> filter_range = used_ranges[row_id]:$[];
	
	create_new_zone["ranges"] = filter (
	    map <string, any> one,
	    create_new_zone["ranges"]:[],
	{
	    return (
		one["base"]:"" != filter_range["base"]:"" ||
		one["start"]:1 != filter_range["start"]:1 ||
		one["from"]:"" != filter_range["from"]:"" ||
		one["to"]:""   != filter_range["to"]:""
	    );
	});
	
	return true;
    }

    boolean Wizard_AddEditNSDialog (boolean edit_current_ns) {
	string caption = _("&Add New Name Server");
	string selected_ns         = "";
	string selected_ns_encoded = "";
	string selected_ip         = "";

	if (edit_current_ns) {
	    caption = _("&Edit Name Server");

	    string row_id = (string) UI::QueryWidget (`id("name_servers"), `CurrentItem);
	    
	    selected_ns         = translated_nameservers[row_id, 0]:"";
	    selected_ns_encoded = translated_nameservers[row_id, 1]:""; // actually the same as 'row_id'
	    selected_ip         = translated_nameservers[row_id, 2]:"";
	}
	
	UI::OpenDialog (
	    `VBox (
		`MarginBox (1, 1,
		    `Frame (
			caption,
			`VBox (
			    `TextEntry (`id("nameserver"), _("Hostname"),   selected_ns),
			    `TextEntry (`id("ip"),         _("Server &IP"), selected_ip)
			)
		    )
		),
		`HBox (
		    `PushButton (`id(`ok),     Label::OKButton()),
		    `PushButton (`id(`cancel), Label::CancelButton())
		)
	    )
	);
	UI::ChangeWidget (`id("ip"), `ValidChars, IP::ValidChars4);
	
	boolean ret_val = false;
	any ret = nil;
	while (true) {
	    ret = UI::UserInput();

	    if (ret == `cancel) {
		ret_val = false;
		break;
	    } else if (ret == `ok) {
		// new values
		string new_selected_ns = (string) UI::QueryWidget (`id("nameserver"), `Value);
		string new_selected_ip = (string) UI::QueryWidget (`id("ip"),         `Value);
		
		if (new_selected_ns != "") {
		    new_selected_ns = DnsServerPunycode::EncodeDomainName(new_selected_ns);
		}

		// Hostname with a dot at the end is not a valid hostname
		// but it's needed for DNS Server
		string hostname_check = new_selected_ns;
		if (regexpmatch(hostname_check, "\.$")) {
		    hostname_check = regexpsub (hostname_check, "(.*)\.$", "\\1");
		}

		if (!Hostname::CheckDomain(hostname_check)) {
		    UI::SetFocus (`id ("nameserver"));
		    Report::Error("Invalid hostname." + "\n\n" + Hostname::ValidDomain());
		    // next UserInput
		    continue;
		}

		// not a final dot
		if (! regexpmatch (new_selected_ns, "\\.$")) {
		    // absolute name, add a dot
		    if (regexpmatch (new_selected_ns, "\\.")) {
			new_selected_ns = new_selected_ns + ".";
		    // relative name, add a domain name
		    } else {
			new_selected_ns = new_selected_ns + "." + current_dhcp_settings["domain"]:"" + ".";
		    }
		}

		// IP is only optional
		if (new_selected_ip != "" && !IP::Check4(new_selected_ip)) {
		    UI::SetFocus (`id("ip"));
		    Report::Error ("Invalid IP address." + "\n\n" + IP::Valid4());
		    // next UserInput
		    continue;
		}
		
		// IP is optional when the server is external
		if (
		    new_selected_ip == "" &&
		    regexpmatch (new_selected_ns, "\." + current_dhcp_settings["domain"]:"" + "\.$")
		) {
		    UI::SetFocus (`id("ip"));
		    if (! Popup::YesNo(_("No IP address provided for a Name Server in the current DNS Zone.
This might not work because every Name Server needs its name and IP defined
somewhere and the current zone is the only place where it can be.

Are you sure you want to use the current settings?"))) continue;
		}

		// changing server name from
		// check whether the new already exists or not
		if (selected_ns_encoded != new_selected_ns) {
		    boolean found_match = false;
		    foreach (list <string> one, create_new_zone["name_servers"]:[], {
			// nameserver already exists in the configuration
			if (one[0]:"" == new_selected_ns) {
			    found_match = true;
			    Report::Error (sformat (
				_("Name Server %1 already exists in the configuration."),
				new_selected_ns
			    ));
			    break;
			}
		    });
		    // next UserInput
		    if (found_match) continue;
		}

		// in case of `edit
		create_new_zone["name_servers"] = filter (
		    list <string> one,
		    create_new_zone["name_servers"]:[],
		{
		    return (one[0]:"" != selected_ns_encoded || one[1]:"" != selected_ip);
		});
		
		create_new_zone["name_servers"] = add (create_new_zone["name_servers"]:[],
		    [new_selected_ns, new_selected_ip]
		);
		
		ret_val = true;
	    
		break;
	    }
	}
	
	UI::CloseDialog();

	return ret_val;
    }
    
    boolean CheckRangeAgainsAllRanges (map <string, any> & new_range, list <map <string, any> > all_ranges) {
	boolean ret = true;

	string new_range_from = new_range["from"]:"";
	string new_range_to   = new_range["to"]:"";
	
	if (new_range_from == "" || new_range_to == "") {
	    y2error("Wrong definition of new range: %1", new_range);
	    return false;
	}

	// $[ "base":"dhcp-%i", "from":"192.168.10.1", "start":1, "to":"192.168.10.254" ]
	foreach (map <string, any> one_range, all_ranges, {
	    string range_from = one_range["from"]:"";
	    string range_to   = one_range["to"]:"";
	
	    if (
		IPisInRangeOfIPs (new_range_from, range_from, range_to) ||
		IPisInRangeOfIPs (new_range_to,   range_from, range_to)
	    ) {
		if (Popup::YesNo (sformat (
		    _("This new range of DNS entries is already covered by
another one (%1 - %2).

Do you really want to use the new one?"),
		    one_range["from"]:"",
		    one_range["to"]:""
		))) {
		    ret = true;
		    break;
		} else {
		    ret = false;
		    break;
		}
	    }
	});

	return ret;
    }

    boolean Wizard_AddEditResourceRecordsDialog (boolean edit_current_rr) {
	string caption = _("&Add New Name Server");

	map <string, any> old_range = $[];

	if (edit_current_rr) {
	    integer row_id = (integer) UI::QueryWidget (`id("dhcp_records"), `CurrentItem);
	    
	    old_range = used_ranges[row_id]:$[];
	}

	// opens a dialog
	CreateUI_DNSRangeDialog (
	    current_dhcp_settings["from_ip"]:"",
	    current_dhcp_settings["to_ip"]:"",
	    old_range
	);
	
	boolean func_ret = false;
	symbol ret = nil;
	while (true) {
	    ret = (symbol) UI::UserInput();
	    
	    if (ret == `cancel) {
		func_ret = false;
		break;
	    } else if (ret == `ok) {
		// working with this map only (in this block)
		list <map <string, any> > current_ranges = create_new_zone["ranges"]:[];

		map <string, any> validated = ValidateAddDNSRangeDialog (current_dhcp_settings);
		if (validated == nil) continue;

		// map with new range
		map <string, any> new_range = $[
		    "base"  : validated["hostname_base"]:"",
		    "start" : validated["hostname_start"]:1,
		    "from"  : validated["first_ip"]:"",
		    "to"    : validated["last_ip"]:"",
		];

		// filter out old range (in case of edit)
		if (old_range != $[]) {
		    current_ranges = filter (map <string, any> one, current_ranges, {
			return (
			    one["base"]:"" != old_range["base"]:nil  ||
			    one["start"]:1 != old_range["start"]:nil ||
			    one["from"]:"" != old_range["from"]:nil  ||
			    one["to"]:""   != old_range["to"]:nil
			);
		    });
		}
		
		// Checks whether a new range doesn't conflict with another one
		if (! CheckRangeAgainsAllRanges (
		    new_range,
		    (list <map <string, any> >) current_ranges
		)) {
		    // cancelled, add the filtered-out range again
		    current_ranges = add (current_ranges, old_range);
		    continue;
		}
		
		// Adding new range definition
		current_ranges = add (current_ranges, new_range);
	    
		func_ret = true;
		create_new_zone["ranges"] = current_ranges;
		
		break;
	    }
	}
	
	UI::CloseDialog();
	
	return func_ret;
    }
    
    boolean CheckNumberOfNameServers () {
	if (size(create_new_zone["name_servers"]:[]) == 0) {
	    Report::Error (
		_("At least one Name Server must be defined.")
	    );
	
	    return false;
	}
	
	return true;
    }

    // <-- Helper functions

    /* ********************************************************************* */

    // --> Definition of Dialogs

    void Wizard_CreateNewZoneDialog () {
	string caption = _("DHCP Server: New DNS Zone - Step 1/3");
	
	term contents = `VBox (
	    `Left (
		`HSquash (
		    `MinWidth (
			30,
			`VBox (
			    `TextEntry (`id ("zone_name"),
				_("New &Zone Name")
			    ),
			    `TextEntry (`id ("current_network"),
				_("&Current Network")
			    ),
			    `VSpacing(1),
			    `Left(`CheckBox  (`id (`create_also_reverse_zone), `opt(`notify),
				_("Create &Also Reverse Zone")
			    )),
			    `ReplacePoint(`id("reverse_zone_rp"), `Empty())
			)
		    )
		)
	    ),
	    `VStretch ()
	);
	
	Wizard::SetContentsButtons (
	    caption,
	    contents,
	    DNS_HELPS["wizard-zones"]:"",
	    Label::BackButton(),
	    Label::NextButton()
	);

	Wizard::DisableBackButton();
    }

    void Wizard_CreateZoneNameServersDialog () {
	string caption = _("DHCP Server: Zone Name Servers - Step 2/3");
	
	term contents = `VBox (
	    `Left (
		`HSquash (
		    `MinWidth (
			30,
			`VBox (
			    `TextEntry (`id ("zone_name"),
				_("New &Zone Name")
			    ),
			    `TextEntry (`id ("current_network"),
				_("&Current Network")
			    )
			)
		    )
		)
	    ),
	    `VSpacing (1),
	    `Left(`Label(_("Current Name Servers"))),
	    `Table (
		`id("name_servers"),
		`header(_("Server Name"), _("IP (Optional)")),
		[]
	    ),
	    `HBox (
		`PushButton (`id(`add_ns),    _("A&dd...")),
		`PushButton (`id(`edit_ns),   _("&Edit...")),
		`PushButton (`id(`delete_ns), Label::DeleteButton())
	    )
	);
	
	Wizard::SetContentsButtons (
	    caption,
	    contents,
	    DNS_HELPS["wizard-nameservers"]:"",
	    Label::BackButton(),
	    Label::NextButton()
	);
    }

    void Wizard_CreateZoneResourceRecordsDialog () {
	string caption = _("DHCP Server: DNS Records - Step 3/3");
	
	term contents = `VBox (
	    `Left (
		`HSquash (
		    `MinWidth (
			30,
			`VBox (
			    `TextEntry (`id ("zone_name"),
				_("New &Zone Name")
			    ),
			    `TextEntry (`id ("current_network"),
				_("&Current Network")
			    )
			)
		    )
		)
	    ),
	    `VSpacing (1),
	    `Left(`Label(_("DNS Records for DHCP Clients"))),
	    `Table (
		`id ("dhcp_records"),
		`header(
		    _("Hostname Base"),
		    _("Start with Number"),
		    _("From IP"),
		    _("To IP")
		),
		[]
	    ),
	    `HBox (
		`PushButton (`id(`add_dhcp),    _("A&dd...")),
		`PushButton (`id(`edit_dhcp),   _("&Edit...")),
		`PushButton (`id(`delete_dhcp), Label::DeleteButton())
	    )
	);
	
	Wizard::SetContentsButtons (
	    caption,
	    contents,
	    DNS_HELPS["wizard-ranges"]:"",
	    Label::BackButton(),
	    Label::NextButton()
	);
    }
    
    void Wizard_CreateNewZoneSummaryDialog () {
	string caption = _("DHCP Server: DNS Records - Summary");
	
	term contents = `VBox (
	    `RichText (`id ("summary"), "")
	);
	
	Wizard::SetContentsButtons (
	    caption,
	    contents,
	    DNS_HELPS["wizard-summary"]:"",
	    Label::BackButton(),
	    Label::AcceptButton()
	);	
    }

    // <-- Definition of Dialogs

    /* ********************************************************************* */

    // Init Dialog Functions -->
    
    void Wizard_InitNewZoneDialog_ReverseZone () {
	// reverse zone is selected to be created
	if (create_new_zone["create_reverse_zone"]:false == true) {
	    UI::ReplaceWidget(`id ("reverse_zone_rp"),
		`TextEntry (`id ("reverse_zone_name"),
		    _("Re&verse Zone Name"), current_dhcp_settings["reverse_domain"]:""
		)
	    );
	    UI::ChangeWidget(`id ("reverse_zone_name"), `Enabled, false);
	} else {
	    UI::ReplaceWidget(`id ("reverse_zone_rp"),
		`Empty()
	    );
	}
    }

    void Wizard_InitNewZoneDialog () {
	UI::ChangeWidget(`id ("zone_name"),       `Value, current_dhcp_settings["domain"]:"");
	UI::ChangeWidget(`id ("current_network"), `Value, sformat("%1 / %2",
	    current_dhcp_settings["current_network"]:"",
	    current_dhcp_settings["netmask"]:""
	));

	UI::ChangeWidget(`id ("zone_name"),       `Enabled, false);
	UI::ChangeWidget(`id ("current_network"), `Enabled, false);

	// init the current checkbox value
	UI::ChangeWidget(`id (`create_also_reverse_zone), `Value,
	    (create_new_zone["create_reverse_zone"]:false == true)
	);
	// disable the checkbox if reverse_domain is not defined
	if (current_dhcp_settings["reverse_domain"]:"" == "") {
	    UI::ChangeWidget(`id (`create_also_reverse_zone), `Enabled, false);
	}

	Wizard_InitNewZoneDialog_ReverseZone();
    }

    void Wizard_InitZoneNameServersDialog () {
	UI::ChangeWidget(`id ("zone_name"),       `Value, current_dhcp_settings["domain"]:"");
	UI::ChangeWidget(`id ("current_network"), `Value, sformat("%1 / %2",
	    current_dhcp_settings["current_network"]:"",
	    current_dhcp_settings["netmask"]:""
	));

	UI::ChangeWidget(`id ("zone_name"),       `Enabled, false);
	UI::ChangeWidget(`id ("current_network"), `Enabled, false);

	// sorts punycode instead of decoded strings
	create_new_zone["name_servers"] = sort (
	    list <string> x, list <string> y,
	    (list <list <string> >) create_new_zone["name_servers"]:[],
	    ``(x[0]:"" < y[0]:"")
	);
	
	list <string> strings_to_translate = [];
	integer counter = -1;
	foreach (list <string> one_ns, create_new_zone["name_servers"]:[], {
	    counter = counter + 1;
	    strings_to_translate[counter] = one_ns[0]:"";
	});

	if (counter > -1) {
	    strings_to_translate = DnsServerPunycode::DocodeDomainNames(strings_to_translate);
	
	    counter = -1;
	    list <term> table_items = maplist (
		list <string> one_ns,
		(list <list <string> >) create_new_zone["name_servers"]:[],
	    {
		counter = counter + 1;
		translated_nameservers[one_ns[0]:""] = [
		    strings_to_translate[counter]:"",
		    one_ns[0]:"",
		    one_ns[1]:"",
		];
		return `item (`id (one_ns[0]:""), strings_to_translate[counter]:"", one_ns[1]:"");
	    });

	    UI::ChangeWidget( `id ("name_servers"), `Items, table_items);

	    UI::ChangeWidget(`id (`edit_ns),   `Enabled, true);
	    UI::ChangeWidget(`id (`delete_ns), `Enabled, true);
	} else {
	    UI::ChangeWidget(`id (`edit_ns),   `Enabled, false);
	    UI::ChangeWidget(`id (`delete_ns), `Enabled, false);
	    
	    UI::ChangeWidget( `id ("name_servers"), `Items, []);
	}
    }

    void Wizard_InitZoneResourceRecordsDialog () {
	UI::ChangeWidget(`id ("zone_name"),       `Value, current_dhcp_settings["domain"]:"");
	UI::ChangeWidget(`id ("current_network"), `Value, sformat("%1 / %2",
	    current_dhcp_settings["current_network"]:"",
	    current_dhcp_settings["netmask"]:""
	));

	UI::ChangeWidget(`id ("zone_name"),       `Enabled, false);
	UI::ChangeWidget(`id ("current_network"), `Enabled, false);

	integer counter = -1;
	list <string> basenames = maplist (map <string, any> one_range, create_new_zone["ranges"]:[], {
	    counter = counter + 1;
	    return tostring(one_range["base"]:"");
	});
	if (counter > -1) {
	    basenames = DnsServerPunycode::DecodePunycodes(basenames);
	}
	
	counter = -1;
	list <term> items = maplist (map <string, any> one_range, create_new_zone["ranges"]:[], {
	    counter = counter + 1;
	    
	    used_ranges[counter] = $[
		"base"  : one_range["base"]:"",
		"start" : one_range["start"]:1,
		"from"  : one_range["from"]:"",
		"to"    : one_range["to"]:"",
	    ];
	    return `item (
		`id (counter),
		basenames[counter]:"",
		one_range["start"]:1,
		one_range["from"]:"",
		one_range["to"]:""
	    );
	});
	
	items = sort (term x, term y, items, ``(x[3]:"" < y[3]:""));
	UI::ChangeWidget (`id ("dhcp_records"), `Items, items);
	
	if (counter > -1) {
	    UI::ChangeWidget( `id(`edit_dhcp),   `Enabled, true);
	    UI::ChangeWidget( `id(`delete_dhcp), `Enabled, true);
	} else {
	    UI::ChangeWidget( `id(`edit_dhcp),   `Enabled, false);
	    UI::ChangeWidget( `id(`delete_dhcp), `Enabled, false);
	}
    }

    void Wizard_InitNewZoneSummaryDialog () {
	string summary = "";
	
	// zone name
	summary = summary + "<p>" + sformat (
	    _("<b>Zone Name:</b> %1"), current_dhcp_settings["domain"]:""
	);

	if (IsDNSZoneMaintained(current_dhcp_settings["domain"]:nil))
	    summary = summary + " " + _("(Current zone will be replaced by the new one)");

	summary = summary + "</p>\n";

	// reverse zone name
	if (create_new_zone["create_reverse_zone"]:true) {
	    summary = summary + "<p>" + sformat (
		_("<b>Reverse Zone Name:</b> %1"), current_dhcp_settings["reverse_domain"]:""
	    );

	    if (IsDNSZoneMaintained(current_dhcp_settings["reverse_domain"]:nil))
		summary = summary + " " + _("(Current zone will be replaced by the new one)");

	    summary = summary + "</p>\n";
	}

	// name servers
	summary = summary + "<p><b>" + _("Zone Name Servers:") + "</b><ul>\n";
	foreach (list <string> ns, create_new_zone["name_servers"]:[], {
	    summary = summary + "<li>" + sformat (
		_("Hostname: %1, IP: %2"),
		ns[0]:"",
		(ns[1]:"" == "" ? _("Not defined"):ns[1]:"")
	    ) + "</li>\n";
	});
	summary = summary + "</ul></p>\n";

	// dhcp ranges
	summary = summary + "<p><b>" + _("Ranges of DNS Hosts:") + "</b><ul>\n";
	foreach (map <string, any> range, create_new_zone["ranges"]:[], {
	    summary = summary + "<li>" + sformat (
		_("Range: %1 - %2<br />Hostname Base: %3, Starting with: %4"),
		range["from"]:"", range["to"]:"",
		range["base"]:"", range["start"]:1
	    ) + "</li>\n";
	});
	summary = summary + "</ul></p>\n";

	UI::ChangeWidget (`id ("summary"), `Value, summary);
    }

    // <-- Init Dialog Functions

    /* ********************************************************************* */

    // --> Wizard Dialogs
    
    symbol Wizard_NewZoneDialog () {
	Wizard_CreateNewZoneDialog();
	Wizard_InitNewZoneDialog();
	
	any ret = nil;
	while (true) {
	    ret = UI::UserInput();
	    
	    y2milestone("Ret: %1", ret);
	    
	    if (ret == `next) {
		Wizard_StoreNewZoneDialog();
		break;
	    } else if (ret == `create_also_reverse_zone) {
		Wizard_StoreNewZoneDialog();
		Wizard_InitNewZoneDialog_ReverseZone();
	    } else if (ret == `abort) {
		if (AbortWizard())
		    break;
	    } else {
		y2error("Unexpected ret: %1", ret);
	    }
	}
	
	return (symbol) ret;
    }
    
    symbol Wizard_ZoneNameServersDialog () {
	Wizard_CreateZoneNameServersDialog();
	Wizard_InitZoneNameServersDialog();

	any ret = nil;
	while (true) {
	    ret = UI::UserInput();
	    
	    y2milestone("Ret: %1", ret);
	    
	    if (ret == `next) {
		if (CheckNumberOfNameServers()) break;
		else continue;
	    } else if (ret == `back) {
		break;
	    } else if (ret == `add_ns) {
		if (Wizard_AddEditNSDialog(false)) Wizard_InitZoneNameServersDialog();
	    } else if (ret == `edit_ns) {
		if (Wizard_AddEditNSDialog(true)) Wizard_InitZoneNameServersDialog();
	    } else if (ret == `delete_ns) {
		if (Wizard_DeleteNSDialog()) Wizard_InitZoneNameServersDialog();
	    } else if (ret == `abort) {
		if (AbortWizard())
		    break;
	    } else {
		y2error("Unexpecetd ret: %1", ret);
	    }
	}

	// free the memory
	translated_nameservers = $[];
	
	return (symbol) ret;
    }
    
    symbol Wizard_ZoneResourceRecordsDialog () {
	Wizard_CreateZoneResourceRecordsDialog();
	Wizard_InitZoneResourceRecordsDialog();

	any ret = nil;
	while (true) {
	    ret = UI::UserInput();
	    
	    y2milestone("Ret: %1", ret);
	    
	    if (ret == `next) {
		if (size (create_new_zone["ranges"]:[]) == 0) {
		    Report::Error(_("At least one DNS record must be set."));
		    continue;
		}
		break;
	    } else if (ret == `back) {
		break;
	    } else if (ret == `add_dhcp) {
		if (Wizard_AddEditResourceRecordsDialog(false)) Wizard_InitZoneResourceRecordsDialog();
	    } else if (ret == `edit_dhcp) {
		if (Wizard_AddEditResourceRecordsDialog(true)) Wizard_InitZoneResourceRecordsDialog();
	    } else if (ret == `delete_dhcp) {
		if (Wizard_DeleteResourceRecordsDialogDialog()) Wizard_InitZoneResourceRecordsDialog();
	    } else if (ret == `abort) {
		if (AbortWizard())
		    break;
	    } else {
		y2error("Unexpected ret: %1", ret);
	    }
	}
	
	// free the memory
	used_ranges = [];
	
	return (symbol) ret;
    }

    symbol Wizard_NewZoneSummaryDialog () {
	Wizard_CreateNewZoneSummaryDialog ();
	Wizard_InitNewZoneSummaryDialog ();

	any ret = nil;
	while (true) {
	    ret = UI::UserInput();

	    if (ret == `next) {
		break;
	    } else if (ret == `back) {
		break;
	    } else if (ret == `abort) {
		if (AbortWizard())
		    break;
	    } else {
		y2error("Unexpected ret: %1", ret);
	    }
	}
	
	return (symbol) ret;
    }
    
    // <-- Wizard Dialogs

    /* ********************************************************************* */
    
    // --> Creating Zones

    string CreateDNSZonesAndFillThemUp () {
	string errors = "";

	string zone = current_dhcp_settings["domain"]:"";

	/* Base Zone */
	// Remove Base zone if exists
	y2milestone("Creating zone: %1", zone);
	if (IsDNSZoneMaintained (zone)) {
	    y2milestone("Removing zone %1", zone);
	    DnsServerAPI::RemoveZone (zone);
	    if (IsDNSZoneMaintained (zone)) {
		errors = errors + sformat (
		    _("Cannot remove current zone %1."), zone
		) + "\n";
		y2error("Cannot remove zone %1", zone);

		return errors;
	    }
	}

	// Create Base zone
	DnsServerAPI::AddZone(zone, "master", $[]);
	if (! IsDNSZoneMaintained (zone)) {
		errors = errors + sformat (
		    _("Cannot create zone %1."), zone
		) + "\n";
		y2error("Cannot create zone %1", zone);

		return errors;
	}

	// Add Name Servers
	foreach (list <string> one_ns, create_new_zone["name_servers"]:[], {
	    y2milestone("Adding NS record: %1 into %2", one_ns[0]:"", zone);
	    DnsServerAPI::AddZoneNameServer (zone, one_ns[0]:"");
	    if (
		one_ns[1]:"" != "" &&
		regexpmatch (one_ns[0]:"", "\." + zone + "\.$")
	    ) {
		y2milestone("Adding A record for NS record (%1 -A-> %2)", one_ns[0]:"", one_ns[1]:"");
		DnsServerAPI::AddZoneRR (zone, "A", one_ns[0]:"", one_ns[1]:"");
	    }
	});
	// Checking added name servers
	if (size (DnsServerAPI::GetZoneNameServers(zone)) != size (create_new_zone["name_servers"]:[])) {
	    errors = errors + sformat (_("Cannot add Name Servers into zone %1."), zone) + "\n";
	    return errors;
	}

	// Create DHCPrange records
	boolean some_errors = false;
	foreach (map <string, any> one_range, create_new_zone["ranges"]:[], {
	    y2milestone("Creating DNS Range: %1", one_range);
	    if (! AddDNSRangeWorker (
		zone,
		zone,
		"A", // adding 'A' records
		one_range["base"]:"",
		one_range["start"]:1,
		one_range["from"]:"",
		one_range["to"]:"")
	    ) {
		errors = errors + _("Cannot add zone DNS records.");
		some_errors = true;
		break;
	    }
	});
	if (some_errors) return errors;

	// Do not create reverse zone
	if (! create_new_zone["create_reverse_zone"]:true) return errors;

	string reverse_zone = current_dhcp_settings["reverse_domain"]:"";
	
	/* Reverse Zone */
	// Remove Reverse zone if exists
	if (IsDNSZoneMaintained (reverse_zone)) {
	    y2milestone("Removing zone %1", reverse_zone);
	    DnsServerAPI::RemoveZone (reverse_zone);
	    if (IsDNSZoneMaintained (reverse_zone)) {
		errors = errors + sformat (
		    _("Cannot remove zone current zone %1."), reverse_zone
		) + "\n";
		y2error("Cannot remove zone %1", reverse_zone);

		return errors;
	    }
	}

	// Create Reverse zone
	y2milestone("Creating zone: %1", reverse_zone);
	DnsServerAPI::AddZone(reverse_zone, "master", $[]);
	if (! IsDNSZoneMaintained (reverse_zone)) {
		errors = errors + sformat (
		    _("Cannot create reverse zone %1."), reverse_zone
		) + "\n";
		y2error("Cannot create zone %1", reverse_zone);

		return errors;
	}

	// Add Name Servers
	foreach (list <string> one_ns, create_new_zone["name_servers"]:[], {
	    y2milestone("Adding NS record: %1 into %2", one_ns[0]:"", reverse_zone);
	    DnsServerAPI::AddZoneNameServer (reverse_zone, one_ns[0]:"");
	    // A records were already added into the Base zone
	});
	// Checking added name servers
	if (size (DnsServerAPI::GetZoneNameServers(reverse_zone)) != size (create_new_zone["name_servers"]:[])) {
	    errors = errors + sformat (_("Cannot add Name Servers into zone %1."), reverse_zone) + "\n";
	    return errors;
	}

	// Create DHCPrange Reverse records
	foreach (map <string, any> one_range, create_new_zone["ranges"]:[], {
	    y2milestone("Creating DNS Range: %1", one_range);
	    if (! AddDNSRangeWorker (
		reverse_zone,
		zone,
		"PTR", // adding 'PTR' records
		one_range["base"]:"",
		one_range["start"]:1,
		one_range["from"]:"",
		one_range["to"]:"")
	    ) {
		errors = errors + _("Cannot add zone DNS records.");
		some_errors = true;
		break;
	    }
	});

	return errors;
    }

    symbol Wizard_CreateZoneDialog () {
	UI::OpenDialog(`Label(_("Creating DNS Zone...")));

	y2milestone("Creating new zone... (backing-up old settings)");

	// backup old settings for now
	map current_settings_save = DnsServer::Export();
	
	symbol ret = `next;
	// Creating zones and records
	string errors = CreateDNSZonesAndFillThemUp();

	UI::CloseDialog();

	// Checking if successful
	if (errors != "") {
	    // restore previous settings
	    UI::OpenDialog (`Label (_("Restoring previous DNS settings...")));
	    y2milestone("Creation failed, Restoring previous DNS settings...");
	    DnsServer::Import (current_settings_save);
	    current_settings_save = $[];
	    UI::CloseDialog();

	    if (Popup::YesNo (sformat (
		_("There were some errors during DNS zone creation:

%1
Do you want to return to the Wizard?"), errors
	    ))) {
		y2milestone("User decided to run through Wizard again");
		ret = `wizard_again;
	    } else {
		y2milestone("User decided to leave the Wizard");
		ret = `next;
	    }
	} else {
	    ret = `next;
	    y2milestone("Creation was successful");
	    Report::Message (_("The DNS zone was successfully created."));
	}
	
	return ret;
    }

    // <-- Creating Zones

    /* ********************************************************************* */

    // --> Wizard Workflow

    symbol RunNewDNSServerWizard (map <string, string> dhcp_settings) {
	// internal client variable init
	current_dhcp_settings = dhcp_settings;
	dhcp_settings = $[];
	
	// init default values
	create_new_zone = $[
	    // cannot create reverse domain if it is undefined
	    "create_reverse_zone" : (current_dhcp_settings["reverse_domain"]:"" != ""),
	    // [ $[ "ns1" : "192.168.0.1" ], ... ]
	    "name_servers" : [],
	    // [ $[ "base" : "dhcp-%", "start" : 101, "from" : "192.168.10.1", "to" : "192.168.10.100" ], ... ]
	    "ranges" : [],
	];

	y2milestone("Known Settings: %1", current_dhcp_settings);

	map aliases = $[
	    "new_zone"          : ``( Wizard_NewZoneDialog() ),
	    "zone_name_servers" : ``( Wizard_ZoneNameServersDialog() ),
	    "zone_rrs"          : ``( Wizard_ZoneResourceRecordsDialog() ),
	    "new_zone_summary"  : ``( Wizard_NewZoneSummaryDialog() ),
	    "create_zone"       : ``( Wizard_CreateZoneDialog() ),
	];
	
	map sequence = $[
	    "ws_start" : "new_zone",
	    "new_zone" : $[
		`abort : `abort,
		`next  : "zone_name_servers",
	    ],
	    "zone_name_servers" : $[
		`abort : `abort,
		`next  : "zone_rrs",
	    ],
	    "zone_rrs" : $[
		`abort : `abort,
		`next  : "new_zone_summary",
	    ],
	    "new_zone_summary" : $[
		`abort : `abort,
		`next  : "create_zone",
	    ],
	    "create_zone" : $[
		// if the creation fails, user can decide
		// to run through the Wizard again
		`wizard_again : "new_zone",
		`abort        : `abort,
		`next         : `next,
	    ]
	];
    
	Wizard::CreateDialog();
	Wizard::SetDesktopIcon ("dhcp-server");

	map dns_server_settings = DnsServer::Export();
	symbol ret = Sequencer::Run (aliases, sequence);
	if (ret != `next) {
	    y2milestone("Ret: %1, Restoring DNS Server settings...", ret);
	    DnsServer::Import (dns_server_settings);
	}
	
	// free the memory
	current_dhcp_settings = nil;
	create_new_zone = nil;

	Wizard::CloseDialog();
	
	return ret;
    }

    // <-- Wizard Workflow

    /* ********************************************************************* */
    
// EOF
}
