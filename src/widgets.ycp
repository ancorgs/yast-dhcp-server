/**
 * File:	include/dhcp-server/widgets.ycp
 * Package:	Configuration of dhcp-server
 * Summary:	Widgets
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

    textdomain "dhcp-server";

    import "CWM";
    import "DhcpServer";
    import "IP";
    import "Label";
    import "LogView";
    import "Popup";
    import "TablePopup";

// pre-declarations

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void configTreeInit (string id);


    /**
      * Function for deleting entry from section
      * Used for all (global, host, subnet) section due to the same location
      *  of data
      * @param opt_id any option id
      * @param key string option key
      * @return boolean true if was really deleted
      */
    global define boolean commonTableEntryDelete (any opt_id, string key) ``{
	if (! is (opt_id, string))
	    return false;
	integer index = tointeger (
	    regexpsub ((string)opt_id, "^[a-z]+ ([0-9]+)$", "\\1"));
	if (substring (key, 0, 7) == "option ")
	{
	    current_entry_options[index] = nil;
	    current_entry_options = filter (any o, current_entry_options,
	    ``( o != nil));
	}
	else
	{
	    current_entry_directives[index] = nil;
	    current_entry_directives = filter (any d, current_entry_directives,
	    ``( d != nil));
	}
	return true;
    }

    /**
      * Create list of identifiers of etries that should be present in the table
      * @param descr map description of the table
      * @return list of identifiers of entries of the table
      */
    global define list getTableContents (map descr) ``{
	integer index = -1;
	list<string> opts = maplist (map m, current_entry_options, ``{
	    index = index + 1;
	    return sformat ("option %1", index);
	});

	index = -1;
	list<string> dirs = maplist (map m, current_entry_directives, ``{
	    index = index + 1;
	    if (m["key"]:"" != "zone")
		return sformat ("directive %1", index);
	    return nil;
	});
	return filter (string id, merge (dirs, opts), ``(id != nil));
    }

    /**
      * Transform table entry id to option id
      * @param table map table description
      * @param id any entry id
      * @return string option key
      */
    global define string id2key (map table, any id) ``{
	if (! is (id, string))
	    return "";
	string strid = (string)id;
	if (substring (strid, 0, 7) == "option ")
	{
	    integer index = tointeger (substring (strid, 7));
	    return sformat ("option %1",
		current_entry_options[index, "key"]:"");
	}
	else if (substring (strid, 0, 10) == "directive ")
	{
	    integer index = tointeger (substring (strid, 10));
	    return current_entry_directives[index, "key"]:"";
	}
	return strid;
    }

    /**
      * Get the popup widget description map
      * @param opt_key string option key
      * @return map popup description map
      */
    global define map key2descr (string opt_key) ``{
	map ret = (map)(popups[opt_key]:nil);
	if (ret != nil)
	    return ret;
	return $[
                "init" : commonPopupInit,
                "store" : commonPopupSave,
	];
    }

    /**
      * Get map of widget
      * @param add_values list of values to be offered via the add button
      * @return map of widget
      */
    global define map getOptionsTableWidget (list add_values) ``{
	map ret = TablePopup::CreateTableDescr (
	    $["add_delete" : true, "up_down" : false],
	    $[
		"init": TablePopup::TableInitWrapper,
		"handle": TablePopup::TableHandleWrapper,
		"options": popups,
		"id2key": id2key,
		"ids": getTableContents,
		"help": HELPS["options_table"]:"",
		"fallback" : $[
		    "init": commonPopupInit,
		    "store": commonPopupSave,
		    "summary": commonTableEntrySummary,
		],
		"option_delete": commonTableEntryDelete,
		"add_items":  add_values,
	    ]
	);
	return ret;
    }

    /**
      * Check whether settings were changed and if yes, ask for exit
      * without saving
      * @return event that should be handled, nil if user canceled the exit
      */
    global define boolean confirmAbort () ``{
        return Popup::YesNo (
// Yes-No popup
_("Really leave the DHCP server configuration without saving?
All changes will be lost."));
    }

/**
 * Enable or disable a widget according the current status of the service
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void dhcpEnabledOrDisabled (string id, map event) ``{
    any ev_id = event["ID"]:nil;
    if (ev_id == "boot" || ev_id == "never")
    {
	boolean enabled = UI::QueryWidget (`id ("start"), `CurrentButton)
	    != "never";
	UI::ChangeWidget (`id (id), `Enabled, enabled);
    }
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void startInit (string id) ``{
    boolean ss = DhcpServer::GetStartService();
    UI::ChangeWidget (`id ("start"), `Value, ss);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void startStore (string id, map event) ``{
    boolean ss = (boolean)UI::QueryWidget (`id ("start"), `Value);
    DhcpServer::SetStartService (ss);
}

/**
 * Handle function of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 * @return symbol always nil
 */
global define symbol startHandle (string id, map event) ``{
    boolean start = (boolean)UI::QueryWidget (`id ("start"), `Value);
    if (start != DhcpServer::GetStartService ())
	DhcpServer::SetModified ();
    return nil;
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void FirewallInit (string id) ``{
    boolean adapt = DhcpServer::GetAdaptFirewall ();
    UI::ChangeWidget (`id (id), `Value, adapt);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void FirewallStore (string id, map event) ``{
    boolean adapt = (boolean)UI::QueryWidget (`id (id), `Value);
    DhcpServer::SetAdaptFirewall (adapt);
    DhcpServer::SetModified ();
}


/**
 * Handle function of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 * @return symbol always nil
 */
global define symbol configTreeHandle (string id, map event) ``{
    if (event["ID"]:nil == `log)
    {
	LogView::Display ($[
	    "file" : "/var/log/messages",
	    "grep" : "dhcpd",
	    "save" : true,
	    "actions" : [
		// menubutton entry, try to keep short
		[ _("Restart DHCP Server"),
		    ``{SCR::Execute (.target.bash,
			"/etc/init.d/dhcpd restart");}],
		// menubutton entry, try to keep short
		[ _("Save Settings and Restart DHCP Server"),
		    ``{DhcpServer::Write ();} ],
	    ],
	]);
	return nil;
    }
    if (event["ID"]:nil == `interfaces)
	return `interfaces;
    string current_item = (string)
	UI::QueryWidget (`id ("configtree"), `CurrentItem);
    if (current_item == " ")
    {
	UI::ChangeWidget (`id (`delete), `Enabled, false);
//	UI::ChangeWidget (`id (`move), `Enabled, false);
    }
    else
    {
	UI::ChangeWidget (`id (`delete), `Enabled, true);
//	UI::ChangeWidget (`id (`move), `Enabled, true);
    }
    map<string,string> selected = key2typeid (current_item);
    if (selected == nil)
    {
	y2error ("Unexistent entry selected");
	return nil;
    }
    string sel_type = selected["type"]:"";
    if (sel_type == "pool" || sel_type == "class" || sel_type == "host")
    {
	UI::ChangeWidget (`id (`add), `Enabled, false);
    }
    else
    {
	UI::ChangeWidget (`id (`add), `Enabled, true);
    }

    if (event["ID"]:nil == "configtree"
	&& event["EventReason"]:nil == "Activated")
    {
	event["ID"] = `edit;
    }

    if (event["ID"]:nil == `add)
    {
	original_entry_type = "";
	original_entry_id = "";
	parent_type = selected["type"]:"";
	parent_id = selected["id"]:"";
	current_entry_options = [];
	current_entry_directives = [];
	current_entry_type = "";
	current_entry_id = "";
	current_operation = `add;
	return `add;
    }
    else if (event["ID"]:nil == `edit)
    {
	current_entry_type = selected["type"]:"";
	current_entry_id = selected["id"]:"";
	current_entry_options = DhcpServer::GetEntryOptions (
	    current_entry_type,
	    current_entry_id);
	current_entry_directives = DhcpServer::GetEntryDirectives (
	    current_entry_type,
	    current_entry_id);

	original_entry_type = current_entry_type;
	original_entry_id = current_entry_id;
	parent_type = "";
	parent_id = "";
	current_operation = `edit;

	return `edit;
    }
    else if (event["ID"]:nil == `delete)
    {
	DhcpServer::DeleteEntry (selected["type"]:"", selected["id"]:"");
	configTreeInit (id);
    }
    else if (event["ID"]:nil == `move)
    {
	return nil;
// TODO move button
    }
    if (event["ID"]:nil == `add || event["ID"]:nil == `edit)
    {
	current_ddns_key_file = DhcpServer::GetDDNSFileName ();
	current_ddns_key_create = DhcpServer::GetDDNSFileCreate ();
    }

    return nil;
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void configTreeInit (string id) ``{
    list items = getItems ("", "");
    items = [
	`item (`id (" "), _("Global options"), true, items)
    ];
    UI::ReplaceWidget (`configtree_rp, `Tree (
	`id ("configtree"),
	`opt (`notify),
	// tree widget
	_("&Configured Declarations"),
        items
    ));
    UI::ChangeWidget (`id ("configtree"), `CurrentItem, " ");
    configTreeHandle (id, $[]);
    return;
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void subnetInit (string id) ``{
    list<string> l = regexptokenize (current_entry_id,
	"^[ \t]*([^ \t]+)[ \t]*netmask[ \t]*([^ \t]+)[ \t]*$");
    UI::ChangeWidget (`id (`subnet), `Value, l[0]:"");
    UI::ChangeWidget (`id (`netmask), `Value, l[1]:"");
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void subnetStore (string id, map event) ``{
    string id = sformat ("%1 netmask %2",
	(string)UI::QueryWidget (`id (`subnet), `Value),
	(string)UI::QueryWidget (`id (`netmask), `Value));
    current_entry_id = id;
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void idInit (string id) ``{
    UI::ChangeWidget (`id (id), `Value, current_entry_id);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void idStore (string id, map event) ``{
    current_entry_id = (string)
	UI::QueryWidget (`id (id), `Value);
}

/**
 * Initialize the widget
 * @param id string widget id
 */
global define void interfacesInit (string id) ``{
    list ifaces = DhcpServer::GetAllowedInterfaces ();
    UI::ChangeWidget (`id (id), `SelectedItems, ifaces);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void interfacesStore (string id, map event) ``{
    list ifaces = (list)UI::QueryWidget (`id (id), `SelectedItems);
    DhcpServer::SetAllowedInterfaces ((list<string>)ifaces);
    DhcpServer::SetModified ();
}

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void DynDnsButtonInit (string id) ``{
    UI::ReplaceWidget (`_tp_table_repl, `PushButton (`id ("dyn_dns_button"),
	// push button
	_("&Dynamic DNS")));
}

/**
 * Handle events of the widget
 * @param id string widget id
 * @param event map event that is handled
 * @return symbol for WS
 */
global define symbol DynDnsButtonHandle (string id, map event) ``{
    return `dyn_dns;
}

/**
 * Handle events of the widget
 * @param id string widget id
 * @param event map event that is handled
 * @return symbol for WS
 */
global define symbol DDNSZonesHandle (string id, map event) ``{
    boolean enabled = (boolean)UI::QueryWidget (`id ("ddns_enable"), `Value);
    UI::ChangeWidget (`id ("zone"), `Enabled, enabled);
    UI::ChangeWidget (`id ("zone_ip"), `Enabled, enabled);
    UI::ChangeWidget (`id ("reverse_zone"), `Enabled, enabled);
    UI::ChangeWidget (`id ("reverse_ip"), `Enabled, enabled);
    return nil;
}

/**
 * Initialize the widget
 * @param id string widget id
 */
global define void DDNSZonesInit (string id) ``{
    string zone = "";
    string ip = "";
    string rev_zone = "";
    string rev_ip = "";
    boolean found_ddns = false;
    foreach (map d, current_entry_directives, ``{
	if (d["key"]:"" == "zone")
	{
	    string value = (string)(d["value"]:"");
	    list<string> l = regexptokenize (value, "^[ \t]*([^ \t]+)[ \t]*\\{[ \t]*primary[ \t]+([^ \t]+)[ \t]*;[ \t]*key[ \t]+DHCP_UPDATER[ \t]*;[ \t]*\}[ \t]*$");
	    if (size (l) == 2)
	    {
		string z = l[0]:"";
		string a = l[1]:"";
		if (issubstring (z, "in-addr.arpa"))
		{
		    rev_zone = z;
		    rev_ip = a;
		}
		else
		{
		    zone = z;
		    ip = a;
		}
		found_ddns = true;
	    }
	}
    });
    if (found_ddns)
    {
	UI::ChangeWidget (`id ("zone"), `Value, zone);
	UI::ChangeWidget (`id ("zone_ip"), `Value, ip);
	UI::ChangeWidget (`id ("reverse_zone"), `Value, rev_zone);
	UI::ChangeWidget (`id ("reverse_ip"), `Value, rev_ip);
    }
    UI::ChangeWidget (`id ("ddns_enable"), `Value, found_ddns);
    DDNSZonesHandle (id, $[]);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void DDNSZonesStore (string id, map event) ``{
    current_entry_directives = filter (map m, current_entry_directives, ``(
	m["key"]:"" != "zone"
    ));
    if ((boolean)UI::QueryWidget (`id ("ddns_enable"), `Value))
    {
	string zone = (string)UI::QueryWidget (`id ("zone"), `Value);
	string ip = (string)UI::QueryWidget (`id ("zone_ip"), `Value);
	string rev_zone = (string)UI::QueryWidget (`id ("reverse_zone"),`Value);
	string rev_ip = (string)UI::QueryWidget (`id ("reverse_ip"), `Value);
	if (ip == "")
	    ip = "127.0.0.1";
	if (rev_ip == "")
	    rev_ip = "127.0.0.1";
	if (zone != "")
	{
	    current_entry_directives = add (current_entry_directives, $[
		"key" : "zone",
		"value" : sformat ("%1 { primary %2; key DHCP_UPDATER; }",
		    zone, ip),
	    ]);
	}
	if (rev_zone != "")
	{
	    current_entry_directives = add (current_entry_directives, $[
		"key" : "zone",
		"value" : sformat ("%1 { primary %2; key DHCP_UPDATER; }",
		    rev_zone, rev_ip),
	    ]);
	}
    }
}

/**
 * Handle events of the widget
 * @param id string widget id
 * @param event map event that is handled
 * @return symbol for WS
 */
global define symbol DDNSGlobalsHandle (string id, map event) ``{
    boolean enabled = (boolean)UI::QueryWidget (
	`id ("update_global_ddns_settings"), `Value);
    UI::ChangeWidget (`id ("key_filename"), `Enabled, enabled);
    UI::ChangeWidget (`id ("key_file_browse_button"), `Enabled, enabled);
    UI::ChangeWidget (`id ("create_key_file"), `Enabled, enabled);
    return nil;
}

/**
 * Initialize the widget
 * @param id string widget id
 */
global define void DDNSGlobalsInit (string id) ``{
    UI::ChangeWidget (`id ("update_global_ddns_settings"), `Value,
	current_ddns_key_file != "");
    UI::ChangeWidget (`id ("key_filename"), `Value, current_ddns_key_file);
    UI::ChangeWidget (`id ("create_key_file"), `Value,
	current_ddns_key_create);
    DDNSGlobalsHandle (id, $[]);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void DDNSGlobalsStore (string id, map event) ``{
    if ((boolean)UI::QueryWidget (`id ("update_global_ddns_settings"), `Value))
    {
	current_ddns_key_file = (string)
	    UI::QueryWidget (`id ("key_filename"), `Value);
	current_ddns_key_create = (boolean)
	    UI::QueryWidget (`id ("create_key_file"), `Value);
    }
    else
    {
	current_ddns_key_file = "";
	current_ddns_key_create = false;
    }
    return;
}

/**
 * Handle events of the widget
 * @param id string widget id
 * @param event map event that is handled
 * @return symbol for WS
 */
global define symbol KeyFileBrowseButtonHandle (string id, map event) ``{
    string filename = (string)UI::QueryWidget (`id ("key_filename"), `Value);
    filename = UI::AskForExistingFile (filename, "",
	// popup headline
	_("Select file with authentication key"));
    if (filename != nil)
	UI::ChangeWidget (`id ("key_filename"), `Value, filename);
    return nil;
}

/**
 * Validate the widget
 * @param id string widget id
 * @param event map event that is handled
 * @return boolean true if validation succeeded
 */
global define boolean EmptyOrIpValidate (string id, map event) ``{
    string val = (string)UI::QueryWidget (`id (id), `Value);
    if (val == "" || IP::Check4 (val))
	return true;
    Popup::Message (IP::Valid4 ());
    UI::SetFocus (`id (id));
    return false;
}

/**
  * Initialize widgets
  * Create description map and copy it into appropriate variable of the
  *  DhcpServer module
  */
global define void InitWidgets () ``{
    list options = [
"option subnet-mask",
"option broadcast-address",
"option routers",
"option static-routes",
"option domain-name",
"option domain-name-servers",
"option host-name",
"option root-path",
"option tftp-server-name",
"option bootfile-name",
"option dhcp-server-identifier",
"option time-servers",
"option ntp-servers",
"option log-servers",
"option lpr-servers",
"option font-servers",
"option x-display-managers",
"option smtp-server",
"option pop-server",
"option irc-server",
"option nis-domain",
"option nis-servers",
"option nisplus-domain",
"option nisplus-servers",
"option interface-mtu",
"option vendor-encapsulated-options",
"option vendor-class-identifier",
"option netbios-name-servers",
"option netbios-dd-server",
"option netbios-note-type",
"option netbios-scope",
    ];

    list common_commands = [
"max-lease-time",
"default-lease-time",
"filename",
"next-server",
    ];

    list global_commands = [
"authoritative",
"ddns-update-style none",
"ddns-updates off",
"log-facility",
    ];

    list subnet_commands = [
"range",
    ];

    list host_commands = [
"hardware",
"fixed-address",
    ];

    list class_commands = [
"match",
    ];

    common_commands = merge (common_commands, options);
    global_commands = toset (merge (global_commands, common_commands));
    subnet_commands = toset (merge (subnet_commands, common_commands));
    host_commands = toset (merge (host_commands, common_commands));

    map w = $[
	"global_table" : getOptionsTableWidget (global_commands),
	"host_table" : getOptionsTableWidget (subnet_commands),
	"subnet_table" : getOptionsTableWidget (host_commands),
	"shared-network_table" : getOptionsTableWidget (common_commands),
	"pool_table" : getOptionsTableWidget (common_commands),
	"group_table" : getOptionsTableWidget (common_commands),
	"class_table" : getOptionsTableWidget (class_commands),
	"dyn_dns_button" : $[
	    "init" : DynDnsButtonInit,
	    "handle" : DynDnsButtonHandle,
	    "handle_events" : [ "dyn_dns_button" ],
	    "help" : HELPS["dyn_dns_button"]:"",
	    "label" : "&D ",//FIXME CWM should be able to handle virtual widgets
	    "widget" : `textentry,
	],
	"start" : $[
		"widget" : `checkbox,
		// check box
		"label" : _("&Start DHCP server"),
		"help" : HELPS["start"]:"",
		"init" : startInit,
		"handle" : startHandle,
		"store" : startStore,
		"opt" : [`notify],
	],
	"configtree" : $[
		"widget" : `custom,
		"custom_widget" : `VBox (
		    `ReplacePoint (`id (`configtree_rp), `Tree (
			`id ("configtree"),
			// tree widget
			_("&Configured declarations"),
			[]
		    )),
		    `HBox (
			`PushButton (`id (`add), Label::AddButton ()),
			`PushButton (`id (`edit), Label::EditButton ()),
			`PushButton (`id (`delete), Label::DeleteButton ()),
//			`PushButton (`id (`move), _("&Move")),
			`HStretch (),
			// menu button
			`MenuButton (`id (`adv), _("Ad&vanced"), [
			    // item of a menu button
			    `item (`id (`log), _("Display &log")),
			    // item of a menu button
			    `item (`id (`interfaces), _("&Interfaces configuration")),
			])
		    )),
		"help" : HELPS["configtree"]:"",
		"init" : configTreeInit,
		"handle" : configTreeHandle,
	],
	"subnet" : $[
		"widget" : `custom,
		"custom_widget" : `HBox (
		    `HSpacing (2),
		    // text entry
		    `TextEntry (`id (`subnet), _("&Network Address")),
		    // text entry
		    `TextEntry (`id (`netmask), _("Network &Mask")),
		    `HSpacing (2)
		),
		"help" : HELPS["subnet"]:"",
		"init" : subnetInit,
		"store" : subnetStore,
	    ],
	    "host" : $[
		"widget" : `textentry,
		// text entry
		"label" : _("Host &name"),
		"help" : HELPS["host"]:"",
		"init" : idInit,
		"store" : idStore,
	],
	"group" : $[
		"widget" : `textentry,
		// text entry
		"label" : _("Group &Name"),
		"help" : HELPS["group"]:"",
		"init" : idInit,
		"store" : idStore,
	],
	"pool" : $[
		"widget" : `textentry,
		// text entry
		"label" : _("Pool &Name"),
		"help" : HELPS["pool"]:"",
		"init" : idInit,
		"store" : idStore,
	],
	"shared-network" : $[
		"widget" : `textentry,
		// text entry
		"label" : _("Shared network &name"),
		"help" : HELPS["shared-network"]:"",
		"init" : idInit,
		"store" : idStore,
	],
	"class" : $[
		"widget" : `textentry,
		// text entry
		"label" : _("Class &name"),
		"help" : HELPS["class"]:"",
		"init" : idInit,
		"store" : idStore,
	],
	"interfaces" : $[
	    "widget" : `custom,
	    "custom_widget" : `MultiSelectionBox (
		`id ("interfaces"),
		// multi selection box
		_("Available interfaces"),
		filter (string s, (list<string>)SCR::Dir (.network.section), ``(
		    s != "lo"
		))
	    ),
	    "help" : HELPS["interfaces"]:"",
	    "init" : interfacesInit,
	    "store" : interfacesStore,
	],
	"adapt_firewall" : $[
	    "widget" : `checkbox,
	    // check box
	    "label" : _("Adapt &Firewall settings"),
	    "init" : FirewallInit,
	    "store" : FirewallStore,
	    "help" : HELPS["adapt_firewall"]:"",
	],
	"ddns_enable" : $[
	    "widget" : `checkbox,
	    // check box
	    "label" : _("&Enable Dynamic DNS for this subnet"),
	    "opt" : [ `notify ],
	    "help" : HELPS["enable_ddns"]:"",
	],
	"zone" : $[
	    "widget" : `textentry,
	    // text entry
	    "label" : _("&Zone"),
	    "init" : DDNSZonesInit,
	    "store" : DDNSZonesStore,
	    "handle" : DDNSZonesHandle,
	    "handle_events" : [ "ddns_enable" ],
	    "help" : HELPS["ddns_zones"]:"",
	],
	"zone_ip" : $[
	    "widget" : `textentry,
	    // text entry
	    "label" : _("&Primary DNS server"),
	    "help" : " ",
	    "validate_type" : `function,
	    "validate_function" : EmptyOrIpValidate,
	],
        "reverse_zone": $[
	    "widget" : `textentry,
	    // text entry
	    "label" : _("Re&verse Zone"),
	    "help" : " ",
	],
	"reverse_ip" : $[
	    "widget" : `textentry,
	    // text entry
	    "label" : _("Pr&imary DNS server"),
	    "help" : " ",
	    "validate_type" : `function,
	    "validate_function" : EmptyOrIpValidate,
	],
	"key_filename" : $[
	    "init" : DDNSGlobalsInit,
	    "store" : DDNSGlobalsStore,
	    "widget" : `textentry,
	    // text entry
	    "label" : _("&Filename with updater key"),
	    "help" : HELPS["updater_key"]:"",
	],
	"key_name" : $[
	    "widget" : `textentry,
	    // text entry
	    "label" : _("Key &name"),
	    "help" : " ",
	],
	"key_file_browse_button" : $[
	    "widget" : `push_button,
	    "label" : Label::BrowseButton (),
	    "handle_events" : [ "key_file_browse_button" ],
	    "handle" : KeyFileBrowseButtonHandle,
	    "help" : " ",
	],
	"create_key_file" : $[
	    "widget" : `checkbox,
	    // check box
	    "label" : _("&Create file with updater key"),
	    "help" : " ",
	],
        "update_global_ddns_settings" : $[
	    "widget": `checkbox,
	    // check box
	    "label": _("&Update global DHCP server settings"),
	    "opt" : [ `notify ],
	    "help" : HELPS["update_global_ddns"]:"",
	    "handle" : DDNSGlobalsHandle,
	    "handle_events" : [ "update_global_ddns_settings" ],
	],


    ];
    DhcpServerUI::widgets = w;
}


}
